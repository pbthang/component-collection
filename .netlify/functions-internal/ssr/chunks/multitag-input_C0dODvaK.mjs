const id = "components/shadcn/multitag-input.mdx";
						const collection = "docs";
						const slug = "components/shadcn/multitag-input";
						const body = "\nCreate an input components for submitting multiple tags using Shadcn/ui form components.\n\n## Demo\n\nimport { Image } from \"astro:assets\";\nimport multitagDemo from \"@/assets/multitagDemo.gif\";\n\n<Image src={multitagDemo} alt=\"Multi-tag input component\" class={\"rounded\"} />\n\n## Prerequisites\n\n[Shadcn/ui](https://ui.shadcn.com/), [lucide-react](https://lucide.dev/), [zod](https://zod.dev/),\nand [react-hook-form](https://react-hook-form.com/) are required to use the code snippet below.\n\nMake sure you add the required components to your project:\n\n```bash showLineNumbers=false\nnpx shadcn-ui@latest add badge button form input label\n```\n\n## Code\n\n```tsx title=\"MultiTagInput.tsx\" collapse={1-11}\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input, InputProps } from \"@/components/ui/input\";\nimport { XIcon } from \"lucide-react\";\nimport { Dispatch, SetStateAction, forwardRef, useState } from \"react\";\n\ntype InputTagsProps = InputProps & {\n  value: string[];\n  onChange: Dispatch<SetStateAction<string[]>>;\n};\n\nexport const InputTags = forwardRef<HTMLInputElement, InputTagsProps>(\n  ({ value, onChange, ...props }, ref) => {\n    const [pendingDataPoint, setPendingDataPoint] = useState(\"\");\n\n    if (!value) {\n      value = [];\n    }\n\n    const addPendingDataPoint = () => {\n      if (pendingDataPoint) {\n        const newDataPoints = new Set([...value, pendingDataPoint]);\n        onChange(Array.from(newDataPoints));\n        setPendingDataPoint(\"\");\n      }\n    };\n\n    return (\n      <>\n        <div className=\"flex\">\n          <Input\n            value={pendingDataPoint}\n            onChange={(e) => setPendingDataPoint(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                e.preventDefault();\n                addPendingDataPoint();\n              } else if (e.key === \",\" || e.key === \" \") {\n                e.preventDefault();\n                addPendingDataPoint();\n              }\n            }}\n            className=\"rounded-r-none w-80\"\n            {...props}\n            ref={ref}\n          />\n          <Button\n            type=\"button\"\n            variant=\"secondary\"\n            className=\"rounded-l-none border border-l-0\"\n            onClick={addPendingDataPoint}\n          >\n            Add\n          </Button>\n        </div>\n        <div className=\"border rounded-md min-h-[2.5rem] overflow-y-auto p-2 flex gap-2 flex-wrap items-center\">\n          {value.map((item, idx) => (\n            <Badge key={idx} variant=\"secondary\">\n              {item}\n              <button\n                type=\"button\"\n                className=\"w-3 ml-2\"\n                onClick={() => {\n                  onChange(value.filter((i) => i !== item));\n                }}\n              >\n                <XIcon className=\"w-3\" />\n              </button>\n            </Badge>\n          ))}\n        </div>\n      </>\n    );\n  }\n);\n```\n\n## Usage\n\n```tsx title=\"App.tsx\" collapse={1-12}\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport {\n  Form,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { InputTags } from \"./MultiTagInput\";\n\n// Define form schema\nconst formSchema = z.object({\n  skills: z.array(z.string().trim()).max(20), // edit as needed\n});\n\nexport default function App() {\n  // Initialize form\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      skills: [],\n    },\n  });\n\n  // Handle form submission\n  const onSubmit = (data: z.infer<typeof formSchema>) => {\n    // Do something with the form values.\n    // âœ… This will be type-safe and validated.\n    console.log(data);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"skills\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Skills</FormLabel>\n              <FormControl>\n                <InputTags {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </form>\n    </Form>\n  );\n}\n```\n";
						const data = {title:"Multi-tag Input",description:"Create a multi-tag input component using TailwindCSS and Shadcn/ui.",editUrl:true,head:[],template:"doc",sidebar:{hidden:false,attrs:{}},pagefind:true,draft:false};
						const _internal = {
							type: 'content',
							filePath: "/Users/pbthang/pbthang-components/src/content/docs/components/shadcn/multitag-input.mdx",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
